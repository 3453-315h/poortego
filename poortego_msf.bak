#
# Start of an attempted Metasploit Plugin for Poortego
#

if ENV['POORTEGO_LOCAL_BASE']
  $:.unshift(ENV['POORTEGO_LOCAL_BASE']) 
end

require "poortego/lib/helpers/poortego_session"
require "poortego/lib/core/poortego_core"

module Msf

  class Plugin::Poortego < Msf::Plugin
  
    class ConsoleCommandDispatcher
      include Msf::Ui::Console::CommandDispatcher
      
      def initialize(driver)
        super
        @poortego_session = Poortego_Session.new()
      end
      
      def name
        "Poortego"
      end
      
      def commands
        {
          "poortego_help"   => "Help menu",   
          "poortego_list"   => "List available objects (at current selection or parents)",
          "poortego_select" => "Select an object and change the current working scope",
        }
      end
  
      #
      # "List" command logic
      #
      #  list [type]   (type is optional)    
      #
      def cmd_poortego_list(*args)
        
        # Default list type is the current default command type
        #list_type = driver.interface.working_values["Default Command Type"]
        
        list_type = @poortego_session.session_values["Default Command Type"]
        if (args.length == 1)
          list_type = args[0]
        elsif (args.length > 1)
          print_error("Ambiguous arguments.  Use -h if you need help.")
        end
    
        # Populate object names array with the contents to list
        list_objs = nil
        case list_type
        when '-h', '-?'       # List Help
          cmd_poortego_list_help
          return
        when 'project', 'projects'        # List Project
          
          list_objs = PoortegoProject.list()
          tbl = Rex::Ui::Text::Table.new('Indent' => 4,
                                     'Columns' => ['id','title','description'])
          list_objs.each do |list_obj|
            tbl << [list_obj.id, list_obj.title, list_obj.description]
          end  
        when 'section', 'sections'        # List Section
          
          #list_objs = PoortegoSection.list(driver.interface.working_values["Current Project"].id)
          list_objs = PoortegoSection.list( @poortego_session.session_values["Current Project"].id )
          
          tbl = Rex::Ui::Text::Table.new('Indent' => 4,
                                     'Columns' => ['id','title','description'])
          list_objs.each do |list_obj|
            tbl << [list_obj.id, list_obj.title, list_obj.description]
          end 
        #when 'transform', 'transforms'    # List Transform
        #  list_objs = PoortegoTransform.list()
        #  tbl = Rex::Ui::Text::Table.new('Indent' => 4,
        #                             'Columns' => ['id','title','description'])
        #  list_objs.each do |list_obj|
        #    tbl << [list_obj.id, list_obj.title, list_obj.description]
        #  end 
        #when 'entity', 'entities'          # List Entity
        #  list_objs =  PoortegoEntity.list(driver.interface.working_values["Current Project"].id, 
        #                       driver.interface.working_values["Current Section"].id)
        #  tbl = Rex::Ui::Text::Table.new('Indent' => 4,
        #                             'Columns' => ['id','title','entity_type','description'])
        #  list_objs.each do |list_obj|
        #    entity_type_title = ''
        #    unless (list_obj.entity_type_id.nil?)
        #      if (list_obj.entity_type_id > 0)
        #        entity_type = PoortegoEntityType.find(list_obj.entity_type_id)
        #        entity_type_title = entity_type.title
        #      end
        #    end
        #    tbl << [list_obj.id, list_obj.title, entity_type_title, list_obj.description]
        #  end 
        #when 'link', 'links'              # List Links
        #  unless (driver.interface.working_values["Current Entity"].nil?)
        #    list_objs =  PoortegoLink.list(driver.interface.working_values["Current Project"].id, 
        #                       driver.interface.working_values["Current Section"].id,
        #                       driver.interface.working_values["Current Entity"].id)
        #  else
        #    list_objs =  PoortegoLink.list(driver.interface.working_values["Current Project"].id, 
        #                       driver.interface.working_values["Current Section"].id)
        #  end
        #                     
        #  tbl = Rex::Ui::Text::Table.new('Indent' => 4,
        #                             'Columns' => ['id','entityA','entityB','title','description'])
        #  list_objs.each do |list_obj|
        #    entityA = PoortegoEntity.find(list_obj.entity_a_id)
        #    entityB = PoortegoEntity.find(list_obj.entity_b_id)
        #    tbl << [list_obj.id, entityA.title, entityB.title, list_obj.title, list_obj.description]
        #  end 
        #when 'entity_type', 'entity_types'  # List Entity Types
        #  list_objs = PoortegoEntityType.list()
        #  tbl = Rex::Ui::Text::Table.new('Indent' => 4,
        #                             'Columns' => ['id','title','description'])
        #  list_objs.each do |list_obj|
        #    tbl << [list_obj.id, list_obj.title, list_obj.description]
        #  end 
        #when 'link_type', 'link_types'  # List Link Types
        #  list_objs = PoortegoLinkType.list()
        #  tbl = Rex::Ui::Text::Table.new('Indent' => 4,
        #                             'Columns' => ['id','title','description'])
        #  list_objs.each do |list_obj|
        #    tbl << [list_obj.id, list_obj.title, list_obj.description]
        #  end 
        else
          print_error("Invalid type argument passed to list command.")
          return                 
        end
    
        print_status("Listing #{list_type}(s) :")  
        puts "\n" + tbl.to_s + "\n"  
    end
  
    def cmd_poortego_list_help(*args)
      print_status("Command    : list")
      print_status("Description: displays list of things of a certain type.")
      print_status("Usage      : 'list [type]'")
      print_status("Details    :")
      print_status("Where type is optional. Vaid types: project(s), section(s), transform(s), entity(s), link(s), entity_type(s), link_type(s).")
      print_status("By default the type is the current default type.")
    end
  
  #
  # Select logic
  #
  def cmd_poortego_select(*args)
    type = ''
    name = '' 
    obj  = nil 
     
    if (args.length == 1)
      #type = driver.interface.working_values["Default Command Type"]
      type = @poortego_session.session_values["Default Command Type"]   
      name = args[0]
    elsif (args.length == 2)
      type = args[0]
      name = args[1]
    else    
      print_error("Invalid number of arguments passed to select command.")
      cmd_select_help
      return
    end
  
    case type
    when '-h', '-?' 
      cmd_select_help
      return
    when 'project'
      if (name =~ /^\d+$/) # ID
        obj = PoortegoProject.find(name)
      else
        obj = PoortegoProject.select(name)
      end
      #driver.interface.working_values["Current Project"] = obj
      @poortego_session.session_values["Current Project"] = obj
      #driver.interface.working_values["Current Object"]  = driver.interface.working_values["Current Project"]
      @poortego_session.session_values["Current Object"] = @poortego_session.session_values["Current Project"]
      #driver.interface.working_values["Current Dispatcher"] = 'ProjectDispatcher'
      @poortego_session.session_values["Current Dispatcher"] = 'ProjectDispatcher'
    when 'section'
      if (name =~ /^\d+$/)
        obj = PoortegoSection.find(name)
      else
        #obj = PoortegoSection.select(driver.interface.working_values["Current Project"].id, name)
        obj = PoortegoSection.select( @poortego_session.session_values["Current Project"].id, name )
      end
      #driver.interface.working_values["Current Section"] = obj
      @poortego_session.session_values["Current Project"] = obj
      #driver.interface.working_values["Current Object"] = driver.interface.working_values["Current Section"]
      @poortego_session.session_values["Current Object"] = @poortego_session.session_values["Current Section"]
      #driver.interface.working_values["Current Dispatcher"] = 'SectionDispatcher'
      @poortego_session.session_values["Current Dispatcher"] = 'SectionDispatcher'
    #when 'transform'
    #  if (name =~ /^\d+$/)
    #    obj = PoortegoTransform.find(name)
    #  else
    #    obj = PoortegoTransform.select(name)
    #  end
    #  driver.interface.working_values["Current Transform"] = obj
    #  driver.interface.working_values["Current Object"] = driver.interface.working_values["Current Transform"]
    #  driver.interface.working_values["Current Dispatcher"] = 'TransformDispatcher'
    #when 'entity'
    #  if (name =~ /^\d+$/)
    #    obj = PoortegoEntity.find(name)
    #  else
    #    obj = PoortegoEntity.select(driver.interface.working_values["Current Project"].id, 
    #                        driver.interface.working_values["Current Section"].id, 
    #                        name)
    #  end
    #  driver.interface.working_values["Current Entity"] = obj
    #  driver.interface.working_values["Current Object"] = driver.interface.working_values["Current Entity"]
    #  driver.interface.working_values["Current Dispatcher"] = 'EntityDispatcher'
    #when 'link'
    #  if (name =~ /^\d+$/)
    #    obj = PoortegoLink.find(name)
    #  else
    #    obj = PoortegoLink.select_by_name(driver.interface.working_values["Current Project"].id, 
    #                              driver.interface.working_values["Current Section"].id, 
    #                              name)
    #  end
    #  driver.interface.working_values["Current Link"] = obj
    #  driver.interface.working_values["Current Object"] = driver.interface.working_values["Current Link"]
    #  driver.interface.working_values["Current Dispatcher"] = 'LinkDispatcher'
    #when 'entity_type'
    #  if (name =~ /^\d+$/)
    #    obj = PoortegoEntityType.find(name)
    #  else
    #    obj = PoortegoEntityType.select(name)
    #  end
    #  driver.interface.working_values["Current EntityType"] = obj
    #  driver.interface.working_values["Current Object"] = driver.interface.working_values["Current EntityType"]
    #  driver.interface.working_values["Current Dispatcher"] = 'EntityTypeDispatcher'
    #when 'link_type'
    #  if (name =~ /^\d+$/)
    #    obj = PoortegoLinkType.find(name)
    #  else
    #    obj = PoortegoLinkType.select(name)
    #  end
    #  driver.interface.working_values["Current LinkType"] = obj
    #  driver.interface.working_values["Current Object"] = driver.interface.working_values["Current LinkType"]
    #  driver.interface.working_values["Current Dispatcher"] = 'LinkTypeDispatcher'  
    else
      print_error("Invalid type: #{type}")
      return
    end
    
    #if (id < 1)
    if (obj.nil?)
      print_error("Invalid #{type} name, use list for list of valid #{type}s.")
      return   
    else
      #driver.interface.working_values["Current Selection Type"] = type
      @poortego_session.session_values["Current Selection Type"] = type
      #driver.interface.update_default_type()
      @poortego_session.update_default_type()
      print_status("Selected #{type}, id #{obj.id}")
      #set_prompt(driver)  # TODO: determine if we want to muck with prompts
    end
  end
  
  
  
    end # Dispatch Class end
  
    def initialize(framework, opts)
      super
                        
      add_console_dispatcher(ConsoleCommandDispatcher)
      @poortego_msf_ver = "0.1" # Plugin Version.  Increments each time we commit to msf
      #@xindex = "#{Msf::Config.get_config_root}/nessus_index" # location of the exploit index file used to speed up searching for valid exploits.
      #@nessus_yaml = "#{Msf::Config.get_config_root}/nessus.yaml" #location of the nessus.yml containing saved nessus creds
      print_status("Poortego Plugin for Metasploit #{@poortego_msf_ver}")
      print_good("Type %bldpoortego_help%clr for a command listing")
      #nessus_index
    end

    def cleanup
      remove_console_dispatcher('Poortego')
    end

    def name
      "poortego"
    end

    def desc
      "Poortego Plugin for Metasploit #{@poortego_msf_ver}"
    end
    protected
  
  end # Plugin Class end
end  # Module end
